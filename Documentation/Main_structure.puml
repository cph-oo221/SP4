@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "main.Main",
  "extensionCallbackMethod": ".puml" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1023368385 { 
   	label=object
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   OBJComputer1023368385[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)OBJComputer</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   gp: GamePanel [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ interact()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

OBJGraphicsCard1023368385[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)OBJGraphicsCard</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

OBJMonster1023368385[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)OBJMonster</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

OBJRam1023368385[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)OBJRam</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

OBJSign1023368385[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)OBJSign</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   gp: GamePanel [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ interact()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

OBJSpeedBoost1023368385[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)OBJSpeedBoost</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ interact()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

SuperObject1023368385[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SuperObject</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   collision: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   dhandler: DialogueHandler [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   dialogue_text: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   dialogue_timer: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   gp: GamePanel [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   image: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   pickUpAble: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   show_dialogue: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   solidArea: Rectangle [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   solidAreaDefaultX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   solidAreaDefaultY: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   solidAreaH: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   solidAreaW: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   solidAreaX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   solidAreaY: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   worldX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   worldY: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ draw(g2: Graphics2D, gp: GamePanel)</TD></TR>
<TR><TD ALIGN="LEFT" >+ interact()</TD></TR>
<TR><TD ALIGN="LEFT" >+ movement()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_1298275357 { 
   	label=entity
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Entity1298275357[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Entity</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   collisionOn: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   direction: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   down1: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   down2: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   down3: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   gp: GamePanel [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   left1: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   left2: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   right1: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   right2: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   solidArea: Rectangle [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   solidAreaDefaultX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   solidAreaDefaultY: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   speed: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   spriteCounter: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   spriteNumber: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   up1: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   up2: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   up3: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   worldX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   worldY: int [1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Monster1298275357[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Monster</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   gp: GamePanel [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   image: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   speed: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   timer: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ draw(g2: Graphics2D)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getImage()</TD></TR>
<TR><TD ALIGN="LEFT" >+ movement()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Player1298275357[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Player</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   HP: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   cooldown: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   cooldown_count: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   currentCollison: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   gp: GamePanel [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   hasGraphicsCard: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   hasRAM: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   invincible: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   invincibleCounter: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   keyH: KeyHandler [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   maxHP: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   screenX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   screenY: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ draw(g2: Graphics2D)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPlayerImage()</TD></TR>
<TR><TD ALIGN="LEFT" >+ pickUpObject(i: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ spin()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_3343801 { 
   	label=main
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   AssetSetter3343801[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)AssetSetter</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   gp: GamePanel [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

CollisionChecker3343801[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)CollisionChecker</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   gp: GamePanel [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ checkKasseFyr(player: Entity)</TD></TR>
<TR><TD ALIGN="LEFT" >+ checkObject(entity: Entity, player: boolean): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ checkTile(entity: Entity)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

DialogueHandler3343801[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)DialogueHandler</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   comic_sans: Font [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ drawDialogue(x: int, y: int, msg: String, g2: Graphics2D)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

EventHandler3343801[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)EventHandler</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   eventRect: Rectangle[][][] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   eventRectDefaultX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   eventRectDefaultY: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   gp: GamePanel [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ checkEvent()</TD></TR>
<TR><TD ALIGN="LEFT" >+ damage()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hit(map: int, col: int, row: int, reqDirection: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ invincibilityFrames()</TD></TR>
<TR><TD ALIGN="LEFT" >+ playerDeath()</TD></TR>
<TR><TD ALIGN="LEFT" >- teleport(map: int, col: int, row: int)</TD></TR>
<TR><TD ALIGN="LEFT" >- toDungeon()</TD></TR>
<TR><TD ALIGN="LEFT" >+ toHubWorld()</TD></TR>
<TR><TD ALIGN="LEFT" >+ win()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

GamePanel3343801[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GamePanel</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   FPS: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   aSetter: AssetSetter [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   cChecker: CollisionChecker [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   currentMap: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   dungeonState: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   eHandler: EventHandler [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   entity: Entity [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   eventH: EventHandler [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   gameState: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   gameThread: Thread [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   kasseFyr: Monster [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   keyH: KeyHandler [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   lossState: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   maxMap: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   maxScreenColumn: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   maxScreenRow: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   maxWorldCol: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   maxWorldRow: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   music: Sound [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   obj: SuperObject[][] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   originalTileSize: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   pauseState: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   playState: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   player: Player [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scale: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   screenHeight: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   screenWidth: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   se: Sound [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   tileM: TileManager [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   tileSize: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   ui: UI [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   winCount: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   winState: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ countWinPoints()</TD></TR>
<TR><TD ALIGN="LEFT" >- gameRestart()</TD></TR>
<TR><TD ALIGN="LEFT" >+ paintComponent(g: Graphics)</TD></TR>
<TR><TD ALIGN="LEFT" >+ playMusic(i: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ playSE(i: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ run()</TD></TR>
<TR><TD ALIGN="LEFT" >+ startGameThread()</TD></TR>
<TR><TD ALIGN="LEFT" >+ stopMusic()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update()</TD></TR>
<TR><TD ALIGN="LEFT" >+ win()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

KeyHandler3343801[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)KeyHandler</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   downPressed: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   ePressed: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   gp: GamePanel [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   leftPressed: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   qPressed: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   rPressed: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   rightPressed: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   upPressed: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ keyPressed(e: KeyEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ keyReleased(e: KeyEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ keyTyped(e: KeyEvent)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Main3343801[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Main</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ main(args: String[])</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Sound3343801[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Sound</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   clip: Clip [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   soundURL: URL[] [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ loop()</TD></TR>
<TR><TD ALIGN="LEFT" >+ play()</TD></TR>
<TR><TD ALIGN="LEFT" >+ stop()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

UI3343801[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)UI</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   RAMimage: BufferedImage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   arial_BOLD_40: Font [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   g2: Graphics2D [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   gp: GamePanel [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   graphicsCardImage: BufferedImage [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ draw(g2: Graphics2D)</TD></TR>
<TR><TD ALIGN="LEFT" >- drawHpBar(x: int, y: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ drawLossScreen()</TD></TR>
<TR><TD ALIGN="LEFT" >+ drawPauseScreen()</TD></TR>
<TR><TD ALIGN="LEFT" >+ drawPlayerLocation(posX: int, posY: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ drawWinScreen()</TD></TR>
<TR><TD ALIGN="LEFT" >+ fpsCounter(posX: int, posY: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getXForCenteredText(text: String): int</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_3560110 { 
   	label=tile
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Tile3560110[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Tile</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   collision: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   image: BufferedImage [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TileManager3560110[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TileManager</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   gp: GamePanel [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   mapTileNum: int[][][] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >+   tiles: Tile[] [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ draw(g2: Graphics2D)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTileImage()</TD></TR>
<TR><TD ALIGN="LEFT" >+ loadMap(filePath: String, map: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
AssetSetter3343801 -> GamePanel3343801[label="gp
[0..1]"];
Entity1298275357 -> Monster1298275357[arrowhead=none, arrowtail=empty, dir=both];
Entity1298275357 -> Player1298275357[arrowhead=none, arrowtail=empty, dir=both];
GamePanel3343801 -> AssetSetter3343801[label="aSetter
[0..1]"];
GamePanel3343801 -> CollisionChecker3343801[label="cChecker
[0..1]"];
GamePanel3343801 -> Entity1298275357[label="entity
[0..1]"];
GamePanel3343801 -> EventHandler3343801[label="eHandler
[0..1]"];
GamePanel3343801 -> EventHandler3343801[label="eventH
[0..1]"];
GamePanel3343801 -> KeyHandler3343801[label="keyH
[0..1]"];
GamePanel3343801 -> Monster1298275357[label="kasseFyr
[0..1]"];
GamePanel3343801 -> Player1298275357[label="player
[0..1]"];
GamePanel3343801 -> Sound3343801[label="music
[0..1]"];
GamePanel3343801 -> Sound3343801[label="se
[0..1]"];
GamePanel3343801 -> SuperObject1023368385[label="obj
[0..*]"];
GamePanel3343801 -> TileManager3560110[label="tileM
[0..1]"];
GamePanel3343801 -> UI3343801[label="ui
[0..1]"];
Main3343801 -> GamePanel3343801[label="main() -> startGameThread()"];
Monster1298275357 -> CollisionChecker3343801[label="update() -> checkTile()"];
Monster1298275357 -> GamePanel3343801[label="gp
[0..1]"];
Player1298275357 -> GamePanel3343801[label="gp
[0..1]"];
Player1298275357 -> KeyHandler3343801[label="keyH
[0..1]"];
Player1298275357 -> SuperObject1023368385[label="update() -> interact()"];
SuperObject1023368385 -> DialogueHandler3343801[label="dhandler
[0..1]"];
SuperObject1023368385 -> GamePanel3343801[label="gp
[0..1]"];
SuperObject1023368385 -> OBJComputer1023368385[arrowhead=none, arrowtail=empty, dir=both];
SuperObject1023368385 -> OBJGraphicsCard1023368385[arrowhead=none, arrowtail=empty, dir=both];
SuperObject1023368385 -> OBJMonster1023368385[arrowhead=none, arrowtail=empty, dir=both];
SuperObject1023368385 -> OBJRam1023368385[arrowhead=none, arrowtail=empty, dir=both];
SuperObject1023368385 -> OBJSign1023368385[arrowhead=none, arrowtail=empty, dir=both];
SuperObject1023368385 -> OBJSpeedBoost1023368385[arrowhead=none, arrowtail=empty, dir=both];
TileManager3560110 -> GamePanel3343801[label="gp
[0..1]"];
TileManager3560110 -> Tile3560110[label="tiles
[0..*]"];
UI3343801 -> GamePanel3343801[label="gp
[0..1]"];
    
}
@enduml